#!/bin/bash
set -e
# mdcheckr: practical CI testing for markdown files
# Copyright (c) 2017 Michael Billington < michael.billingotn@gmail.com >
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

function extract_links() {
  # Extract URLs from Markdown file:
  # - Render via Pandoc
  # - Extract URI via href="" attribute
  # - Format as one URI per line
  pandoc -f markdown_github "$1" | \
    (xmllint --nowarning --html --xpath '*//a/@href' - 2> /dev/null || true) | \
    sed 's/ href="\([^"]*\)"/\1\n/g'
}

function green() {
  echo -e "\033[32m[ \e[1m$1\e[21m ]\e[0m"
}

function red() {
  echo -e "\033[31m[ \e[1m$1\e[21m ]\e[0m"
}

function explain {
  >&2 echo -e Warning:$1:$2
}

DIR=`pwd`

for i in $@; do
  cd "$DIR"
  fn=$(basename "$i")
  # Jump into same dir as file
  cd `dirname "$i"`
  echo "Checking $i .."
  while read -r line; do
    # Notify of check
    echo -n "- $line ";
    fail=0
    # Do check
    if [ ! -f "$line" ]; then
      if ! curl --silent --head --location --fail "$line" > /dev/null; then
        fail=1
        REASON="Broken link to '$line'"
      fi
    fi
    # Result
    if [ "$fail" == 1 ]; then
      red "FAIL"
      explain "$i" "$REASON"
      failures=$((failures+1))
    else
      green "OK"
    fi
  done < <(extract_links "$fn")
done

# Return to initial directory
cd $DIR

# Log number of failures
if [ "$failures" -gt 0 ]; then
  echo "Done, with $failures warning(s)."
fi

# Use number of failures as exit code
exit $failures
